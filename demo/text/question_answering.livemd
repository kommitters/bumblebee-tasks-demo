# Question answering

```elixir
Mix.install(
  [
    {:kino_bumblebee, "~> 0.3.0"},
    {:exla, "~> 0.5.1"}
  ],
  config: [nx: [default_backend: EXLA.Backend]]
)
```

## Using distilbert-base-cased-distilled-squad model

```elixir

```

<!-- livebook:{"attrs":{"compiler":"exla","sequence_length":500,"task_id":"question_answering","variant_id":"distilbert_base_cased"},"chunks":[[0,344],[346,595]],"kind":"Elixir.KinoBumblebee.TaskCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, model_info} = Bumblebee.load_model({:hf, "distilbert-base-cased-distilled-squad"})

{:ok, tokenizer} = Bumblebee.load_tokenizer({:hf, "distilbert-base-cased-distilled-squad"})

serving =
  Bumblebee.Text.question_answering(model_info, tokenizer,
    compile: [batch_size: 1, sequence_length: 500],
    defn_options: [compiler: EXLA]
  )

inputs = [
  question: Kino.Input.text("Question", default: "Where do I live?"),
  context: Kino.Input.textarea("Context", default: "My name is Sarah and I live in London.")
]

form = Kino.Control.form(inputs, submit: "Run")
frame = Kino.Frame.new()

Kino.listen(form, fn %{data: %{question: question, context: context}} ->
  output = Nx.Serving.run(serving, %{question: question, context: context})

  output.results
  |> Enum.map(&{&1.text, &1.score})
  |> Kino.Bumblebee.ScoredList.new()
  |> then(&Kino.Frame.render(frame, &1))
end)

Kino.Layout.grid([form, frame], boxed: true, gap: 16)
```
